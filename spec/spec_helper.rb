require 'rspec/given'

require 'cache_shoe'

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
Dir[File.join(
  File.expand_path("../../spec/support/**/*.rb", __FILE__)
)].sort.each { |f| require f }

RSpec.configure do |config|
  config.expect_with :rspec do |expectations|
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  config.mock_with :rspec do |mocks|
    mocks.verify_partial_doubles = true
  end

  config.default_formatter = 'doc' if config.files_to_run.one?
  config.disable_monkey_patching!
  config.filter_run :focus
  config.order = :random
  config.run_all_when_everything_filtered = true
  config.warnings = true

  Kernel.srand config.seed

  config.before :all do
    CacheShoe.config.cache = InMemoryCache.new
  end

  config.before :each do
    CACHE_ACTIONS.clear
    CacheShoe.config.cache.clear
  end

  CACHE_ACTIONS = {}

  CacheShoe.config.on_cache = lambda do |cache_key, cache_hit|
    CACHE_ACTIONS[cache_key] ||= []
    CACHE_ACTIONS[cache_key] << { read: cache_hit }
  end

  CacheShoe.config.on_cache_clear = lambda do |cache_key, trigger_method|
    CACHE_ACTIONS[cache_key] ||= []
    CACHE_ACTIONS[cache_key] << { trigger_method => :clear }
  end

  config.after :each do |example|
    if example.exception
      p "-" * 30
      p "Cache Actions"
      pp CACHE_ACTIONS
      p "-" * 30
    end
  end
end

RSpec::Matchers.define :have_cached do |*expected_cache_pattern|
  class << self
    attr_accessor :cache_key, :actual_cache_pattern
  end

  match do |service_instance, method, *args|
    scope = CacheShoe::Scope.new(
      object: service_instance, cached_method: method, args: args)
    self.cache_key = scope.cache_key

    self.actual_cache_pattern =
      (CACHE_ACTIONS[cache_key] || [{}]).flatten

    actual_cache_pattern == expected_cache_pattern
  end

  failure_message_for_should do |_service_instance, _method, *_args|
    "Expected cache pattern: #{expected_cache_pattern}, but got: " \
      "#{actual_cache_pattern} for " \
      "cache_key #{cache_key}"
  end
end
